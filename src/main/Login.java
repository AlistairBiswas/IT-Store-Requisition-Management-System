/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Rafeed
 */
public class Login extends javax.swing.JFrame {

    Socket socket;
    BufferedReader in;
    PrintWriter out;
    
    private int x;
    private int y;

    // <editor-fold defaultstate="collapsed" desc="For Frame move">
    private void initMoving(JFrame frame) {
        panelMove.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                x = me.getX() + 3;
                y = me.getY() + 3;
            }
        });
        panelMove.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent me) {
                if (SwingUtilities.isLeftMouseButton(me)) {
                    frame.setLocation(frame.getLocation().x + me.getX() - x, frame.getLocation().y + me.getY() - y);
                }
            }
        });
    }// </editor-fold>  

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        simpleLoginButtonBar1.initEvent(this);
        initMoving(this);
        roleField.setSelectedItem(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        panelMove = new javax.swing.JPanel();
        simpleLoginButtonBar1 = new titlebar.SimpleLoginButtonBar();
        keyField = new textfield.TextField();
        passwordField = new textfield.PasswordField();
        roleField = new combobox.Combobox();
        signInLine = new javax.swing.JLabel();
        button1 = new button.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setOpaque(true);

        panelMove.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelMoveLayout = new javax.swing.GroupLayout(panelMove);
        panelMove.setLayout(panelMoveLayout);
        panelMoveLayout.setHorizontalGroup(
            panelMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMoveLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(simpleLoginButtonBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelMoveLayout.setVerticalGroup(
            panelMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(simpleLoginButtonBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        keyField.setLabelText("Email / Branch ID");

        passwordField.setLabelText("Password");

        roleField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Requisition Manager", "Branch Representative" }));
        roleField.setSelectedItem(-1);
        roleField.setLabeText("Role");

        signInLine.setFont(new java.awt.Font("SansSerif", 1, 26)); // NOI18N
        signInLine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signInLine.setText("Sign In");

        button1.setText("Sign In");
        button1.setBorderColor(new java.awt.Color(3, 155, 216));
        button1.setColorClick(new java.awt.Color(0, 221, 215));
        button1.setColorOver(new java.awt.Color(66, 221, 215));
        button1.setRadius(35);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(panelMove, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(keyField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(passwordField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(roleField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(signInLine, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(button1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(keyField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addComponent(roleField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(signInLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(panelMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(signInLine, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(roleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        if (keyField.getText().length() <= 0 || passwordField.getPassword().length <= 0 || roleField.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Please fill up the credentials first.");
        } else {
            Client tempClient;
            if (roleField.getSelectedIndex() == 0) {
                tempClient = new Client(keyField.getText(), new String(passwordField.getPassword()), 0);
                tempClient.setId(tempClient.authenticate());
                if (tempClient.getId() == 0) {
                    JOptionPane.showMessageDialog(null, "Either Name or password is not Correct for Manager");
                    keyField.setText("");
                    passwordField.setText("");
                } else {
                    try {
                        Socket socket = new Socket("localhost", 8000);
                        sendIdToServer("REQUISITION_MANAGER", socket, tempClient.getId());
                        AdminPanel ap = new AdminPanel(tempClient.getId(), socket);
                        ap.setVisible(true);
                        dispose();
                    } catch (IOException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else if (roleField.getSelectedIndex() == 1) {
                tempClient = new Client(keyField.getText(), new String(passwordField.getPassword()), 1);
                tempClient.setId(tempClient.authenticate());
                if (tempClient.getId() == 0) {
                    JOptionPane.showMessageDialog(null, "Either Branch or password is not Correct for Branch Representative");
                    keyField.setText("");
                    passwordField.setText("");
                } else {
                    try {
                        Socket socket = new Socket("localhost", 8000);
                        sendIdToServer("BRANCH_REPRESENTATIVE", socket, tempClient.getId());
                        UserPanel up = new UserPanel(tempClient.getId(), socket);
                        up.setVisible(true);
                        dispose();
                    } catch (IOException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_button1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Login login = new Login();
                login.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.Button button1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private textfield.TextField keyField;
    private javax.swing.JPanel panelMove;
    private textfield.PasswordField passwordField;
    private combobox.Combobox roleField;
    private javax.swing.JLabel signInLine;
    private titlebar.SimpleLoginButtonBar simpleLoginButtonBar1;
    // End of variables declaration//GEN-END:variables

    private String formatMessage(String ... messages) {
        StringBuilder buffer = new StringBuilder();
        String delim = "";
        for (String message : messages) {
            buffer.append(delim);
            delim = "|";
            buffer.append(message);
        }
        return buffer.toString();
    }
    
    private void sendIdToServer(String role, Socket clientSocket, int id) throws IOException {
        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
        String roleMessage = formatMessage(role, Integer.toString(id));
        out.println(roleMessage);
    }
}
